{"remainingRequest":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/src/components/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/src/components/App.vue","mtime":1561622324326},{"path":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shoichi/Desktop/vueX-orm/vuex-orm-examples/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport data from '../data'\nimport store from '../store'\nimport AppHeader from './AppHeader'\nimport Description from './Description'\nimport Users from './Users'\nimport Todos from './Todos'\nimport AppFooter from './AppFooter'\n\nexport default {\n  store,\n\n  components: {\n    AppHeader,\n    Description,\n    Users,\n    Todos,\n    AppFooter\n  },\n\n  data () {\n    return {\n      yay: 'Hello!'\n    }\n  },\n\n  created () {\n    // Here we are stubbing the initial data. In the real world, this\n    // should be the response from the API Backend.\n    const initialData = data\n\n    this.$store.dispatch('entities/todos/create', { data: initialData })\n  },\n\n  mounted () {\n    this.$store.dispatch('entities/users/test')\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"App\">\n    <AppHeader />\n\n    <Description />\n\n    <div class=\"container\">\n      <div class=\"users\"><Users /></div>\n      <div class=\"todos\"><Todos /></div>\n    </div>\n\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport data from '../data'\nimport store from '../store'\nimport AppHeader from './AppHeader'\nimport Description from './Description'\nimport Users from './Users'\nimport Todos from './Todos'\nimport AppFooter from './AppFooter'\n\nexport default {\n  store,\n\n  components: {\n    AppHeader,\n    Description,\n    Users,\n    Todos,\n    AppFooter\n  },\n\n  data () {\n    return {\n      yay: 'Hello!'\n    }\n  },\n\n  created () {\n    // Here we are stubbing the initial data. In the real world, this\n    // should be the response from the API Backend.\n    const initialData = data\n\n    this.$store.dispatch('entities/todos/create', { data: initialData })\n  },\n\n  mounted () {\n    this.$store.dispatch('entities/users/test')\n  }\n}\n</script>\n\n<style src=\"../styles/bootstrap.css\"></style>\n\n<style scoped>\n.App {\n  padding: 96px 48px 128px;\n}\n\n.container {\n  display: flex;\n  margin: 0 auto;\n  width: 960px;\n}\n\n.users {\n  padding-right: 48px;\n  width: calc(100% / 3);\n}\n\n.todos {\n  width: calc((100% / 3) * 2);\n}\n</style>\n"]}]}